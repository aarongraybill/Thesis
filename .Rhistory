geom_segment(aes(
x = .5,
xend = .5,
y = demand(.5, .5, sig, P, E),
yend = demand(.5, 4, sig, P, E)
), arrow = arrow(length = unit(.1,"inches")),color="red",)
base +
xlim(0.2, 2) +
geom_function(
fun = function(x)
demand(x, .5, sig, P, E)
) +
geom_function(
fun = function(x)
demand(x, 4, sig, P, E)
) +
ggtitle(TeX("Increases To Reputation Shift Firm's Available Demand")) +
xlab(TeX("Price set by firm $i$")) +
ylab(TeX("Qunatity Demanded For Firm $i$")) +
coord_flip() +
annotate(
"text",
x = 1.2 * .5,
y = 1.1 * demand(.5, .5, sig, P, E),
label = TeX("$r_1$"),
parse = T
) +
annotate(
"text",
x = 1.2 * .5,
y = 1.1 * demand(.5, 4, sig, P, E),
label = TeX("$Q_D(r_2,P)$"),
parse = T
) +
theme(legend.position = "none") +
geom_segment(aes(
x = .5,
xend = .5,
y = demand(.5, .5, sig, P, E),
yend = demand(.5, 4, sig, P, E)
), arrow = arrow(length = unit(.1,"inches")),color="red",)
base +
xlim(0.2, 2) +
geom_function(
fun = function(x)
demand(x, .5, sig, P, E)
) +
geom_function(
fun = function(x)
demand(x, 4, sig, P, E)
) +
ggtitle(TeX("Increases To Reputation Shift Firm's Available Demand")) +
xlab(TeX("Price set by firm $i$")) +
ylab(TeX("Qunatity Demanded For Firm $i$")) +
coord_flip() +
annotate(
"text",
x = 1.2 * .5,
y = 1.1 * demand(.5, .5, sig, P, E),
label = TeX("$Q_D(r_1)$"),
parse = T
) +
annotate(
"text",
x = 1.2 * .5,
y = 1.1 * demand(.5, 4, sig, P, E),
label = TeX("$Q_D(r_2)$"),
parse = T
) +
theme(legend.position = "none") +
geom_segment(aes(
x = .5,
xend = .5,
y = demand(.5, .5, sig, P, E),
yend = demand(.5, 4, sig, P, E)
), arrow = arrow(length = unit(.1,"inches")),color="red",)
base +
xlim(0.2, 2) +
geom_function(
fun = function(x)
demand(x, .5, sig, P, E)
) +
geom_function(
fun = function(x)
demand(x, 4, sig, P, E)
) +
ggtitle(TeX("Increases To Reputation Shift Firm's Available Demand")) +
xlab(TeX("Price set by firm $i$")) +
ylab(TeX("Qunatity Demanded For Firm $i$")) +
coord_flip() +
annotate(
"text",
x = 1.2 * .5,
y = 1.2 * demand(.5, .5, sig, P, E),
label = TeX("$Q_D(r_1)$"),
parse = T
) +
annotate(
"text",
x = 1.2 * .5,
y = 1.1 * demand(.5, 4, sig, P, E),
label = TeX("$Q_D(r_2)$"),
parse = T
) +
theme(legend.position = "none") +
geom_segment(aes(
x = .5,
xend = .5,
y = demand(.5, .5, sig, P, E),
yend = demand(.5, 4, sig, P, E)
), arrow = arrow(length = unit(.1,"inches")),color="red",)
base +
xlim(0.2, 2) +
geom_function(
fun = function(x)
demand(x, .5, sig, P, E)
) +
geom_function(
fun = function(x)
demand(x, 4, sig, P, E)
) +
ggtitle(TeX("Increases To Reputation Shift Firm's Available Demand")) +
xlab(TeX("Price set by firm $i$")) +
ylab(TeX("Qunatity Demanded For Firm $i$")) +
coord_flip() +
annotate(
"text",
x = 1.2 * .5,
y = 1.3 * demand(.5, .5, sig, P, E),
label = TeX("$Q_D(r_1)$"),
parse = T
) +
annotate(
"text",
x = 1.2 * .5,
y = 1.1 * demand(.5, 4, sig, P, E),
label = TeX("$Q_D(r_2)$"),
parse = T
) +
theme(legend.position = "none") +
geom_segment(aes(
x = .5,
xend = .5,
y = demand(.5, .5, sig, P, E),
yend = demand(.5, 4, sig, P, E)
), arrow = arrow(length = unit(.1,"inches")),color="red",)
citr:::insert_citation()
citr:::insert_citation()
knit_with_parameters('/Volumes/GoogleDrive/My Drive/Thesis_Git/Thesis/Draft5(LiteratureReview)/NewProposal.Rmd')
??update
install.packages("installr")
library(installr)
updateR()
rerestart_RGui()
devtools::install_github("benmarwick/huskydown")
install.packages("devtools")
devtools::install_github("benmarwick/huskydown")
install.packages(bookdown)
bookdown::render_book('Draft6.Rmd', huskydown::thesis_pdf(latex_engine = 'xelatex'))
bookdown::render_book('index.Rmd', huskydown::thesis_pdf(latex_engine = 'xelatex'))
bookdown::render_book('index/index.Rmd', huskydown::thesis_pdf(latex_engine = 'xelatex'))
bookdown::render_book("/Volumes/GoogleDrive/My Drive/Thesis_Git/Thesis/index/index.Rmd", huskydown::thesis_pdf(latex_engine = 'xelatex'))
restart()
restartDescription()
install.packages('xaringan')
library(tinytex)
tlmgr_update()
library(tinytex)
tlmgr_update()
tlmgr_update()
tinytex::is_tinytex()
install.packages("tinytex")
install.packages("tinytex")
tinytex::install_tinytex()
warnings()
?google_font
??google_font
xaringanthemer::header_font_google
xaringanthemer::style_mono_accent()
?xaringanthemer::style_mono_accent()
options(htmltools.dir.version = FALSE)
library(xaringanthemer)
style_mono_accent(
base_color = "#CF5253",
header_font_google = google_font("Dosis"),
text_font_google   = google_font("Monda"),
code_font_google   = google_font("Fira Mono")
)
vignette("xarignan")
vignette("xaringan")
vignette("xaringan")
vignette(xaringan)
??xaringan
xaringanthemer::style()
xaringanthemer::theme_xaringan_get_value()
?xarignanthemer::style_do_accent
?xaringanthemer::style_do_accent
?xaringanthemer::style_duo_accent
?xaringanthemer
options(htmltools.dir.version = T)
library(xaringanthemer)
style_duo_accent(
primary_color = "#8C2730",
secondary_color= "#D8E6F2",
black_color = "#261201",
header_font_google = google_font("Playfair Display"),
text_font_google   = google_font("Average", "300", "300i"),
code_font_google   = google_font("Fira Mono"),
text_font_size = "1.5rem",
style_extra_css(css=extra_css,outfile = "bullets.css")
)
library(xaringanthemer)
style_duo_accent(
primary_color = "#8C2730",
secondary_color= "#D8E6F2",
black_color = "#261201",
header_font_google = google_font("Playfair Display"),
text_font_google   = google_font("Average", "300", "300i"),
code_font_google   = google_font("Fira Mono"),
text_font_size = "1.5rem",
style_extra_css(outfile = "bullets.css")
)
?style_extra_css
library(xaringanthemer)
p <- style_duo_accent(
primary_color = "#8C2730",
secondary_color= "#D8E6F2",
black_color = "#261201",
header_font_google = google_font("Playfair Display"),
text_font_google   = google_font("Average", "300", "300i"),
code_font_google   = google_font("Fira Mono"),
text_font_size = "1.5rem",
style_extra_css(css="bullets.css",append = T)
)
?style_duo_accent
xaringanthemer:::style_duo_accent()
xaringanthemer:::style_duo_accent
??mpg
cars
d <- cars[1:2,1:2]
d$speed <- as.character(d$speed)
d <- cars[1:2,1:2]
d$speed <- as.character(d$speed)
d$speed[1] <- "$\\uparrow$"
install.packages("RefManageR")
library(RefManageR)
bib <- ReadBib("./RunningBib.bib", check = FALSE)
ui <- "- "
install.packages("bibtex")
library(RefManageR)
bib <- ReadBib("./RunningBib.bib", check = FALSE)
library(RefManageR)
bib <- ReadBib("../RunningBib.bib", check = FALSE)
ui <- "- "
writeLines(ui)
print(bib[key = "wickham2016r"],
.opts = list(check.entries = FALSE,
style = "html",
bib.style = "authoryear"))
View(bib)
bib[["aly-tovarWhyWouldArtists2020"]]
bib$aguiarQualityPredictabilityWelfare2018$andersonLongTailWhy2006
bib$aguiarQualityPredictabilityWelfare2018$aguiarQualityPredictabilityWelfare2018
bib$aguiarQualityPredictabilityWelfare2018[1]
bib$aguiarQualityPredictabilityWelfare2018
?writeLines
writeLines("thkumbus")
xaringan::inf_mr()
remotes::install_github('yihui/xaringan')
options(htmltools.dir.version = T)
library(plotly)
x <- seq(0,10, length.out = 1000)
# create data
aval <- list()
for(step in 1:11){
aval[[step]] <-list(visible = FALSE,
name = paste0('v = ', step),
x=x,
y=sin(step*x))
}
aval[3][[1]]$visible = TRUE
# create steps and plot all traces
steps <- list()
fig <- plot_ly()
for (i in 1:11) {
fig <- add_lines(fig,x=aval[i][[1]]$x,  y=aval[i][[1]]$y, visible = aval[i][[1]]$visible,
name = aval[i][[1]]$name, type = 'scatter', mode = 'lines', hoverinfo = 'name',
line=list(color='FFCED1'), showlegend = FALSE)
step <- list(args = list('visible', rep(FALSE, length(aval))),
method = 'restyle')
step$args[[2]][i] = TRUE
steps[[i]] = step
}
# add slider control to plot
fig <- fig %>%
layout(sliders = list(list(active = 3,
currentvalue = list(prefix = "Frequency: "),
steps = steps)))
fig
```
View(steps)
View(step)
7.2
7.2*4
d <- read.csv("Downloads/TryData.csv")
d <- read.csv("/Users/aarongraybill/Downloads/TryData.csv")
View(d)
library(ggplot2)
library(dplyr)
d <-
d %>%
rename(0A)
d <-
d %>%
rename(iA) %>%
rowwise() %>%
mutate(A = sum(across(starts_with("A")), na.rm = T))
d <-
d %>%
rename(iA=A) %>%
rowwise() %>%
mutate(A = sum(across(starts_with("A")), na.rm = T))
?rowwise
d <- read.csv("/Users/aarongraybill/Downloads/TryData (1).csv")
View(d)
d <-
d %>%
rename(iA=A) %>%
rowwise() %>%
mutate(A = sum(across(starts_with("A")), na.rm = T))
d <- read.csv("/Users/aarongraybill/Downloads/TryData (2).csv")
View(d)
d <- read.csv("/Users/aarongraybill/Downloads/TryData (3).csv")
ggplot(d)+
geom_scatter(aes(x=nd,y=nu,col=winner),alpha=.1)
library(ggplot2)
ggplot(d)+
geom_scatter(aes(x=nd,y=nu,col=winner),alpha=.1)
ggplot(d)+
geom_point(aes(x=nd,y=nu,col=winner),alpha=.1)
?geom_violin
ggplot(d)+
geom_violin(aes(winner,nd/nu))
ggplot(d)+
geom_violin(aes(winner,nu/nd))
ggplot(d)+
geom_violin(aes(winner,nu-nd))
ggplot(d)+
geom_violin(aes(winner,nu))
max(d$nd)
ggplot(d)+
geom_violin(aes(winner,I0))
ggplot(d)+
geom_violin(aes(winner,iA))
ggplot(d)+
geom_violin(aes(winner,iA/I0))
ggplot(d)+
geom_violin(aes(winner,log(iA/I0)))
ggplot(d)+
geom_violin(aes(winner,iA-i0))
ggplot(d)+
geom_violin(aes(winner,iA-I0))
geom_density2d(aes(nd,nu))
ggplot(d)+
geom_density2d(aes(nd,nu))
ggplot(d)+
geom_density2d_fiilled(aes(nd,nu))
ggplot(d)+
geom_density2d_filled(aes(nd,nu))
ggplot(d)+
geom_density2d_filled(aes(I0,iA))
hist(d$iA)
hist(d$I0)
ggplot(d)+
geom_violin(aes(winner,beta))
?geom_violin
ggplot(d)+
geom_point(aes(x=nd,y=nu,col=winner),alpha=.1,width=count)
ggplot(d)+
geom_violin(aes(winner,beta),width="count")
ggplot(d)+
geom_violin(aes(winner,beta),scale = "count")
ggplot(d)+
geom_violin(aes(winner,delta),scale = "count")
ggplot(d)+
geom_violin(aes(winner,delta))#,scale = "count")
summary(d$winner)
tabulate(d$winner)
tabulate(as.factor(d$winner))
View(d)
ggplot(d)+
geom_density2d_filled(aes(beta,iA))
ggplot(d)+
geom_density2d_filled(aes(I0,nd))
?ggplot
ggplot(d)+
geom_violin(aes(winner,delta))#,scale = "count")
ggplot(d)+
geom_violin(aes(winner,delta)),scale = "count")
ggplot(d)+
geom_violin(aes(winner,delta),scale = "count")
ggplot(d)+
geom_point(aes(x=nd,y=nu,col=winner),alpha=.1)
ggplot(d)+
geom_point(aes(x=nd,y=nu,col=winner),alpha=.1)+
guides(colour = guide_legend(override.aes = list(alpha = 1)))
ggplot(d)+
geom_point(aes(x=nd,y=nu,col=winner),alpha=.1)
ggplot(d)+
geom_point(aes(x=nd,y=nu,col=winner),alpha=.1)+
guides(colour = guide_legend(override.aes = list(alpha = 1)))
d_sum <-
d %>%
group_by(winner) %>%
summarise(across(nu:I0),mean)
d_sum <-
d %>%
group_by(winner) %>%
summarise(across(nu:I0,mean))
View(d_sum)
d_sum <-
d %>%
mutate(premium=nu/nd-1) %>%
group_by(winner) %>%
summarise(across(c(nu:I0,premium),mean))
View(d_sum)
d_sum <-
d %>%
mutate(premium=nu/nd-1) %>%
group_by(winner) %>%
summarise(across(c(nu:I0,premium),mean,trim=.05))
View(d_sum)
ggplot(d)+
geom_point(aes(x=nd,y=nu,col=winner),alpha=.1)+
guides(colour = guide_legend(override.aes = list(alpha = 1)))+
scale_color_viridis_d()
?scale_colour_viridis_d
ggplot(d)+
geom_point(aes(x=nd,y=nu,col=winner),alpha=.1)+
guides(colour = guide_legend(override.aes = list(alpha = 1)))+
scale_color_viridis_b()
ggplot(d)+
geom_point(aes(x=nd,y=nu,col=winner),alpha=.1)+
guides(colour = guide_legend(override.aes = list(alpha = 1)))+
scale_color_viridis_d(direction = -1)
d <-
d %>%
mutate(premium=nu/nd-1)
sum(n$ABCD)
sum(d$ABCD)
sum(d$ACBD)
ggplot(d)+
geom_boxplot(aes(premium,col=winner))
ggplot(d)+
geom_violin(aes(winner,premium),scale = "count")+
ylim(0,100)
ggplot(d)+
geom_violin(aes(winner,premium),scale = "count")+
ylim(0,10)
ggplot(d)+
geom_violin(aes(winner,premium)#,scale = "count"
)+
ylim(0,10)
ggplot(d)+
geom_violin(aes(winner,premium)#,scale = "count"
)+
ylim(0,3)
ggplot(d)+
geom_violin(aes(winner,premium),scale = "count"
)+
ylim(0,3)
mean(d$premium>3)
mean(d$premium>5)
mean(d$premium>10)
mean(d$premium>50)
mean(d$premium>100)
ggplot(d)+
geom_violin(aes(winner,premium),scale = "count"
)+
ylim(0,100)
ggplot(d)+
geom_violin(aes(winner,premium)#,scale = "count"
)+
ylim(0,100)
ggplot(d)+
geom_violin(aes(winner,premium)#,scale = "count"
)+
ylim(0,3)
sum(d$ADBC)
sum(d$ADCB)
sum(d$ABCD)
sum(d$ACBD)
sum(d$DABD)
sum(d$DABC)
sum(d$DABC)
sum(d$DACB)
d_sum <-
d %>%
group_by(winner) %>%
summarise(across(c(nu:I0,premium),min))
d_sum <-
d %>%
group_by(winner) %>%
summarise(across(c(nu:I0,premium),median))
median(d$delta)
mean(d$delta)
mean(d$Id)
median(d$Id)
median(d$Iu)
hist(d$Iu-d$Id)
median(d$nd)
install.packages("bookdown")
